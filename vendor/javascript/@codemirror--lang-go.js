// @codemirror/lang-go@6.0.1 downloaded from https://ga.jspm.io/npm:@codemirror/lang-go@6.0.1/dist/index.js

import{parser as e}from"@lezer/go";import{syntaxTree as t,continuedIndent as n,flatIndent as a,delimitedIndent as o,indentNodeProp as l,foldInside as r,foldNodeProp as c,LRLanguage as i,LanguageSupport as s}from"@codemirror/language";import{snippetCompletion as f,completeFromList as p,ifNotIn as m}from"@codemirror/autocomplete";import{NodeWeakMap as d,IterMode as u}from"@lezer/common";const y=[f("func ${name}(${params}) ${type} {\n\t${}\n}",{label:"func",detail:"declaration",type:"keyword"}),f("func (${receiver}) ${name}(${params}) ${type} {\n\t${}\n}",{label:"func",detail:"method declaration",type:"keyword"}),f("var ${name} = ${value}",{label:"var",detail:"declaration",type:"keyword"}),f("type ${name} ${type}",{label:"type",detail:"declaration",type:"keyword"}),f("const ${name} = ${value}",{label:"const",detail:"declaration",type:"keyword"}),f("type ${name} = ${type}",{label:"type",detail:"alias declaration",type:"keyword"}),f("for ${init}; ${test}; ${update} {\n\t${}\n}",{label:"for",detail:"loop",type:"keyword"}),f("for ${i} := range ${value} {\n\t${}\n}",{label:"for",detail:"range",type:"keyword"}),f("select {\n\t${}\n}",{label:"select",detail:"statement",type:"keyword"}),f("case ${}:\n${}",{label:"case",type:"keyword"}),f("switch ${} {\n\t${}\n}",{label:"switch",detail:"statement",type:"keyword"}),f("switch ${}.(${type}) {\n\t${}\n}",{label:"switch",detail:"type statement",type:"keyword"}),f("if ${} {\n\t${}\n}",{label:"if",detail:"block",type:"keyword"}),f("if ${} {\n\t${}\n} else {\n\t${}\n}",{label:"if",detail:"/ else block",type:"keyword"}),f('import ${name} "${module}"\n${}',{label:"import",detail:"declaration",type:"keyword"})];const $=new d;const k=new Set(["SourceFile","Block","FunctionDecl","MethodDecl","FunctionLiteral","ForStatement","SwitchStatement","TypeSwitchStatement","IfStatement"]);function defIDs(e,t){return(n,a)=>{e:for(let o=n.node.firstChild,l=0,r=null;;){while(!o){if(!l)break e;l--;o=r.nextSibling;r=r.parent}if(t&&o.name==t||o.name=="SpecList"){l++;r=o;o=o.firstChild}else{o.name=="DefName"&&a(o,e);o=o.nextSibling}}return true}}const b={FunctionDecl:defIDs("function"),VarDecl:defIDs("var","VarSpec"),ConstDecl:defIDs("constant","ConstSpec"),TypeDecl:defIDs("type","TypeSpec"),ImportDecl:defIDs("constant","ImportSpec"),Parameter:defIDs("var"),__proto__:null};function getScope(e,t){let n=$.get(t);if(n)return n;let a=[],o=true;function def(t,n){let o=e.sliceString(t.from,t.to);a.push({label:o,type:n})}t.cursor(u.IncludeAnonymous).iterate((t=>{if(o)o=false;else if(t.name){let e=b[t.name];if(e&&e(t,def)||k.has(t.name))return false}else if(t.to-t.from>8192){for(let n of getScope(e,t.node))a.push(n);return false}}));$.set(t,a);return a}const w=/^[\w$\xa1-\uffff][\w$\d\xa1-\uffff]*$/;const S=["String","LineComment","BlockComment","DefName","LabelName","FieldName",".","?."];const localCompletionSource=e=>{let n=t(e.state).resolveInner(e.pos,-1);if(S.indexOf(n.name)>-1)return null;let a=n.name=="VariableName"||n.to-n.from<20&&w.test(e.state.sliceDoc(n.from,n.to));if(!a&&!e.explicit)return null;let o=[];for(let t=n;t;t=t.parent)k.has(t.name)&&(o=o.concat(getScope(e.state.doc,t)));return{options:o,from:a?n.from:e.pos,validFor:w}};const g=i.define({name:"go",parser:e.configure({props:[l.add({IfStatement:n({except:/^\s*({|else\b)/}),LabeledStatement:a,"SwitchBlock SelectBlock":e=>{let t=e.textAfter,n=/^\s*\}/.test(t),a=/^\s*(case|default)\b/.test(t);return e.baseIndent+(n||a?0:e.unit)},Block:o({closing:"}"}),BlockComment:()=>null,Statement:n({except:/^{/})}),c.add({"Block SwitchBlock SelectBlock LiteralValue InterfaceType StructType SpecList":r,BlockComment(e){return{from:e.from+2,to:e.to-2}}})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"`"]},commentTokens:{line:"//",block:{open:"/*",close:"*/"}},indentOnInput:/^\s*(?:case\b|default\b|\})$/}});let kwCompletion=e=>({label:e,type:"keyword"});const h="interface struct chan map package go return break continue goto fallthrough else defer range true false nil".split(" ").map(kwCompletion);function go(){let e=y.concat(h);return new s(g,[g.data.of({autocomplete:m(S,p(e))}),g.data.of({autocomplete:localCompletionSource})])}export{go,g as goLanguage,localCompletionSource,y as snippets};

