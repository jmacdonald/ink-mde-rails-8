// @codemirror/lang-python@6.1.6 downloaded from https://ga.jspm.io/npm:@codemirror/lang-python@6.1.6/dist/index.js

import{parser as e}from"@lezer/python";import{syntaxTree as r,delimitedIndent as t,indentNodeProp as n,foldInside as o,foldNodeProp as i,LRLanguage as a,LanguageSupport as l}from"@codemirror/language";import{NodeWeakMap as s,IterMode as c}from"@lezer/common";import{snippetCompletion as m,completeFromList as p,ifNotIn as d}from"@codemirror/autocomplete";const f=new s;const u=new Set(["Script","Body","FunctionDefinition","ClassDefinition","LambdaExpression","ForStatement","MatchClause"]);function defID(e){return(r,t,n)=>{if(n)return false;let o=r.node.getChild("VariableName");o&&t(o,e);return true}}const y={FunctionDefinition:defID("function"),ClassDefinition:defID("class"),ForStatement(e,r,t){if(t)for(let t=e.node.firstChild;t;t=t.nextSibling)if(t.name=="VariableName")r(t,"variable");else if(t.name=="in")break},ImportStatement(e,r){var t,n;let{node:o}=e;let i=((t=o.firstChild)===null||t===void 0?void 0:t.name)=="from";for(let e=o.getChild("import");e;e=e.nextSibling)e.name=="VariableName"&&((n=e.nextSibling)===null||n===void 0?void 0:n.name)!="as"&&r(e,i?"variable":"namespace")},AssignStatement(e,r){for(let t=e.node.firstChild;t;t=t.nextSibling)if(t.name=="VariableName")r(t,"variable");else if(t.name==":"||t.name=="AssignOp")break},ParamList(e,r){for(let t=null,n=e.node.firstChild;n;n=n.nextSibling){n.name!="VariableName"||t&&/\*|AssignOp/.test(t.name)||r(n,"variable");t=n}},CapturePattern:defID("variable"),AsPattern:defID("variable"),__proto__:null};function getScope(e,r){let t=f.get(r);if(t)return t;let n=[],o=true;function def(r,t){let o=e.sliceString(r.from,r.to);n.push({label:o,type:t})}r.cursor(c.IncludeAnonymous).iterate((r=>{if(r.name){let e=y[r.name];if(e&&e(r,def,o)||!o&&u.has(r.name))return false;o=false}else if(r.to-r.from>8192){for(let t of getScope(e,r.node))n.push(t);return false}}));f.set(r,n);return n}const E=/^[\w\xa1-\uffff][\w\d\xa1-\uffff]*$/;const b=["String","FormatString","Comment","PropertyName"];function localCompletionSource(e){let t=r(e.state).resolveInner(e.pos,-1);if(b.indexOf(t.name)>-1)return null;let n=t.name=="VariableName"||t.to-t.from<20&&E.test(e.state.sliceDoc(t.from,t.to));if(!n&&!e.explicit)return null;let o=[];for(let r=t;r;r=r.parent)u.has(r.name)&&(o=o.concat(getScope(e.state.doc,r)));return{options:o,from:n?t.from:e.pos,validFor:E}}const g=["__annotations__","__builtins__","__debug__","__doc__","__import__","__name__","__loader__","__package__","__spec__","False","None","True"].map((e=>({label:e,type:"constant"}))).concat(["ArithmeticError","AssertionError","AttributeError","BaseException","BlockingIOError","BrokenPipeError","BufferError","BytesWarning","ChildProcessError","ConnectionAbortedError","ConnectionError","ConnectionRefusedError","ConnectionResetError","DeprecationWarning","EOFError","Ellipsis","EncodingWarning","EnvironmentError","Exception","FileExistsError","FileNotFoundError","FloatingPointError","FutureWarning","GeneratorExit","IOError","ImportError","ImportWarning","IndentationError","IndexError","InterruptedError","IsADirectoryError","KeyError","KeyboardInterrupt","LookupError","MemoryError","ModuleNotFoundError","NameError","NotADirectoryError","NotImplemented","NotImplementedError","OSError","OverflowError","PendingDeprecationWarning","PermissionError","ProcessLookupError","RecursionError","ReferenceError","ResourceWarning","RuntimeError","RuntimeWarning","StopAsyncIteration","StopIteration","SyntaxError","SyntaxWarning","SystemError","SystemExit","TabError","TimeoutError","TypeError","UnboundLocalError","UnicodeDecodeError","UnicodeEncodeError","UnicodeError","UnicodeTranslateError","UnicodeWarning","UserWarning","ValueError","Warning","ZeroDivisionError"].map((e=>({label:e,type:"type"})))).concat(["bool","bytearray","bytes","classmethod","complex","float","frozenset","int","list","map","memoryview","object","range","set","staticmethod","str","super","tuple","type"].map((e=>({label:e,type:"class"})))).concat(["abs","aiter","all","anext","any","ascii","bin","breakpoint","callable","chr","compile","delattr","dict","dir","divmod","enumerate","eval","exec","exit","filter","format","getattr","globals","hasattr","hash","help","hex","id","input","isinstance","issubclass","iter","len","license","locals","max","min","next","oct","open","ord","pow","print","property","quit","repr","reversed","round","setattr","slice","sorted","sum","vars","zip"].map((e=>({label:e,type:"function"}))));const x=[m("def ${name}(${params}):\n\t${}",{label:"def",detail:"function",type:"keyword"}),m("for ${name} in ${collection}:\n\t${}",{label:"for",detail:"loop",type:"keyword"}),m("while ${}:\n\t${}",{label:"while",detail:"loop",type:"keyword"}),m("try:\n\t${}\nexcept ${error}:\n\t${}",{label:"try",detail:"/ except block",type:"keyword"}),m("if ${}:\n\t\n",{label:"if",detail:"block",type:"keyword"}),m("if ${}:\n\t${}\nelse:\n\t${}",{label:"if",detail:"/ else block",type:"keyword"}),m("class ${name}:\n\tdef __init__(self, ${params}):\n\t\t\t${}",{label:"class",detail:"definition",type:"keyword"}),m("import ${module}",{label:"import",detail:"statement",type:"keyword"}),m("from ${module} import ${names}",{label:"from",detail:"import",type:"keyword"})];const _=d(b,p(g.concat(x)));function innerBody(e){let{node:r,pos:t}=e;let n=e.lineIndent(t,-1);let o=null;for(;;){let i=r.childBefore(t);if(!i)break;if(i.name=="Comment")t=i.from;else if(i.name=="Body"){e.baseIndentFor(i)+e.unit<=n&&(o=i);r=i}else{if(!i.type.is("Statement"))break;r=i}}return o}function indentBody(e,r){let t=e.baseIndentFor(r);let n=e.lineAt(e.pos,-1),o=n.from+n.text.length;return/^\s*($|#)/.test(n.text)&&e.node.to<o+100&&!/\S/.test(e.state.sliceDoc(o,e.node.to))&&e.lineIndent(e.pos,-1)<=t||/^\s*(else:|elif |except |finally:)/.test(e.textAfter)&&e.lineIndent(e.pos,-1)>t?null:t+e.unit}const S=a.define({name:"python",parser:e.configure({props:[n.add({Body:e=>{var r;let t=innerBody(e);return(r=indentBody(e,t||e.node))!==null&&r!==void 0?r:e.continue()},IfStatement:e=>/^\s*(else:|elif )/.test(e.textAfter)?e.baseIndent:e.continue(),"ForStatement WhileStatement":e=>/^\s*else:/.test(e.textAfter)?e.baseIndent:e.continue(),TryStatement:e=>/^\s*(except |finally:|else:)/.test(e.textAfter)?e.baseIndent:e.continue(),"TupleExpression ComprehensionExpression ParamList ArgList ParenthesizedExpression":t({closing:")"}),"DictionaryExpression DictionaryComprehensionExpression SetExpression SetComprehensionExpression":t({closing:"}"}),"ArrayExpression ArrayComprehensionExpression":t({closing:"]"}),"String FormatString":()=>null,Script:e=>{var r;let t=innerBody(e);return(r=t&&indentBody(e,t))!==null&&r!==void 0?r:e.continue()}}),i.add({"ArrayExpression DictionaryExpression SetExpression TupleExpression":o,Body:(e,r)=>({from:e.from+1,to:e.to-(e.to==r.doc.length?0:1)})})]}),languageData:{closeBrackets:{brackets:["(","[","{","'",'"',"'''",'"""'],stringPrefixes:["f","fr","rf","r","u","b","br","rb","F","FR","RF","R","U","B","BR","RB"]},commentTokens:{line:"#"},indentOnInput:/^\s*([\}\]\)]|else:|elif |except |finally:)$/}});function python(){return new l(S,[S.data.of({autocomplete:localCompletionSource}),S.data.of({autocomplete:_})])}export{_ as globalCompletion,localCompletionSource,python,S as pythonLanguage};

